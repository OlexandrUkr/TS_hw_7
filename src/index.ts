// Визначте інтерфейс, який використовує сигнатуру індексу з типами об'єднання. 
// Наприклад, тип значення для кожного ключа може бути число | рядок.
interface ITask_1 {
  [key: string]: number | string;
}

// Створіть інтерфейс, у якому типи значень у сигнатурі індексу є функціями. 
// Ключами можуть бути рядки, а значеннями — функції, які приймають будь-які аргументи.
interface ITask_2 {
  [key: string]: (...args: any[]) => any;
}

// Опишіть інтерфейс, який використовує сигнатуру індексу для опису об'єкта, подібного до масиву. 
// Ключі повинні бути числами, а значення - певного типу.
interface ITask_3 {
  [key: number]: string;
}

// Створіть інтерфейс з певними властивостями та індексною сигнатурою. 
// Наприклад, ви можете мати властивості типу name: string та індексну сигнатуру для додаткових динамічних властивостей.
interface ITask_4 {
  name: string;
  [key: string]: string;
}

// Створіть два інтерфейси, один з індексною сигнатурою, а інший розширює перший, додаючи специфічні властивості.
interface ITask_5_1 {
  [key: string]: string;
}
interface ITask_5_2 extends ITask_5_1 {
  name: string;
}

// Напишіть функцію, яка отримує об'єкт з індексною сигнатурою і перевіряє, 
// чи відповідають значення певних ключів певним критеріям (наприклад, чи всі значення є числами).
interface ITask_6 {
  [key: string]: any;
}

function func_6(obj: ITask_6, checkKeys: string[]): boolean {
  for (const key in checkKeys) {
    if (typeof obj[key] !== 'number') {
      return false;
    }
  }
  return true;
}
